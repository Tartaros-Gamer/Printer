/*
 * Project: Printer
 * Copyright (C) 2020 Bilal Salha <bsalha1@gmail.com>
 * GNU GPLv3 <https://www.gnu.org/licenses/gpl-3.0.en.html>
 */

package com.reliableplugins.printer.listeners;

import com.reliableplugins.printer.Printer;
import com.reliableplugins.printer.PrinterPlayer;
import com.reliableplugins.printer.config.Message;
import com.reliableplugins.printer.utils.BukkitUtil;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.ItemFrame;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockDispenseEvent;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.hanging.HangingBreakByEntityEvent;
import org.bukkit.event.inventory.InventoryCreativeEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.player.*;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;

import java.util.List;

public class ListenPrinterExploit implements Listener
{
    @EventHandler
    public void onBlockBreak(BlockBreakEvent event)
    {
        PrinterPlayer player = PrinterPlayer.fromPlayer(event.getPlayer());
        if(player == null || !player.isPrinting())
        {
            return;
        }

        if(Printer.INSTANCE.getMainConfig().isUnbreakable(event.getBlock().getType()))
        {
            event.setCancelled(true);
            Message.ERROR_BLOCK_BREAK_NOT_ALLOWED.sendColoredMessage(player.getPlayer());
        }
        else if(Printer.INSTANCE.getMainConfig().onlyBreakPlaced())
        {
            Location location = event.getBlock().getLocation();
            if(player.isPlacedBlock(location))
            {
                Material material = player.popPlacedMaterial(location);

                Double price;
                if(BukkitUtil.isBlockOfItem(material))
                {
                    price = Printer.INSTANCE.getItemBlockPrice(event.getPlayer(), BukkitUtil.getItemOfBlock(material));
                }
                else
                {
                    price = Printer.INSTANCE.getPrice(event.getPlayer(), material, event.getBlock().getData());
                }

                if(price != null)
                {
                    player.decrementCost(price);
                }
            }
            else
            {
                event.setCancelled(true);
                Message.ERROR_NOT_PLACED_IN_PRINTER.sendColoredMessage(player.getPlayer());
            }
        }
    }

    @EventHandler
    public void onItemFrameBreak(HangingBreakByEntityEvent event)
    {
        if(!(event.getRemover() instanceof Player))
        {
            return;
        }

        PrinterPlayer player = PrinterPlayer.fromPlayer((Player) event.getRemover());
        if(player == null || !player.isPrinting())
        {
            return;
        }

        event.setCancelled(true);
        Message.ERROR_BLOCK_BREAK_NOT_ALLOWED.sendColoredMessage(player.getPlayer());
    }

    @EventHandler
    public void onPlayerDropItem(PlayerDropItemEvent event)
    {
        PrinterPlayer player = PrinterPlayer.fromPlayer(event.getPlayer());
        if(player == null || !player.isPrinting())
        {
            return;
        }

        event.setCancelled(true);
        Message.ERROR_DROP_ITEM_EXPLOIT.sendColoredMessage(player.getPlayer());
    }

    @EventHandler
    public void onItemPickup(PlayerPickupItemEvent event)
    {
        PrinterPlayer player = PrinterPlayer.fromPlayer(event.getPlayer());
        if(player == null || !player.isPrinting())
        {
            return;
        }
        event.setCancelled(true);

        if(System.currentTimeMillis() - player.getLastPickupTimestamp() > 1000)
        {
            player.setLastPickupTimestamp(System.currentTimeMillis());
            Message.ERROR_PICKUP_EXPLOIT.sendColoredMessage(player.getPlayer());
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onCommandPreExecute(PlayerCommandPreprocessEvent event)
    {
        PrinterPlayer player = PrinterPlayer.fromPlayer(event.getPlayer());
        if(player == null || !player.isPrinting() || Printer.INSTANCE.getMainConfig().isAllowedCommand(event.getMessage()))
        {
            return;
        }

        event.setCancelled(true);
        Message.ERROR_COMMAND_EXPLOIT.sendColoredMessage(player.getPlayer());
    }

    @EventHandler
    public void onCreativeInventory(InventoryCreativeEvent event)
    {
        PrinterPlayer player = PrinterPlayer.fromPlayer((Player) event.getWhoClicked());
        if(player == null || !player.isPrinting())
        {
            return;
        }

        ItemStack item = event.getCursor();
        Material material = item.getType();

        // Don't allow things with display names (could be a money voucher)
        if(item.getItemMeta() != null && item.getItemMeta().getDisplayName() != null && item.getItemMeta().getDisplayName().length() != 0)
        {
            event.setCancelled(true);
            Message.ERROR_ITEM_PLACE_NOT_ALLOWED.sendColoredMessage(player.getPlayer());
            return;
        }

        // Don't allow items that don't correspond to an item
        if(!material.isBlock() && !BukkitUtil.isItemOfBlock(material))
        {
            event.setCancelled(true);
            Message.ERROR_ITEM_PLACE_NOT_ALLOWED.sendColoredMessage(player.getPlayer());
            return;
        }

        // Don't allow being close to itemframes
        if(BukkitUtil.isNearby(player.getPlayer(), EntityType.ITEM_FRAME, 2))
        {
            event.setCancelled(true);
            player.printerOff();
            Message.ERROR_ITEM_FRAME_EXPLOIT.sendColoredMessage(player.getPlayer());
            return;
        }

        // Don't allow looking at itemframe
        for(Entity entity : BukkitUtil.getLookingAt(player.getPlayer()))
        {
            if(entity instanceof ItemFrame)
            {
                event.setCancelled(true);
                player.printerOff();
                Message.ERROR_ITEM_FRAME_EXPLOIT.sendColoredMessage(player.getPlayer());
                return;
            }
        }

        player.addInternalItem(event.getCursor());
    }

    @EventHandler
    public void onDispenseArmor(BlockDispenseEvent event)
    {
        if(!Printer.INSTANCE.getNmsHandler().isArmor(event.getItem()))
        {
            return;
        }

        org.bukkit.material.Dispenser dispenser = (org.bukkit.material.Dispenser) event.getBlock().getState().getData();
        Location dispenserLocation = event.getBlock().getLocation();
        Location toCheck;
        switch (dispenser.getFacing())
        {
            case UP:   // +y
                toCheck = dispenserLocation.clone().add(0, 1, 0);
                break;
            case DOWN: // -y
                toCheck = dispenserLocation.clone().add(0, -1, 0);
                break;
            case EAST: // +x
                toCheck = dispenserLocation.clone().add(1, 0, 0);
                break;
            case WEST: // -x
                toCheck = dispenserLocation.clone().add(-1, 0, 0);
                break;
            case SOUTH: // +z
                toCheck = dispenserLocation.clone().add(0, 0, 1);
                break;
            case NORTH: // -z
                toCheck = dispenserLocation.clone().add(0, 0, -1);
                break;
            default:
                throw new IllegalStateException("Unexpected value: " + dispenser.getFacing());
        }

        List<Entity> nearbyEntities = BukkitUtil.getEntities(toCheck, 2);
        for(Entity entity : nearbyEntities)
        {
            if(entity instanceof Player)
            {
                PrinterPlayer player = PrinterPlayer.fromPlayer((Player) entity);
                if(player == null || !player.isPrinting())
                {
                    continue;
                }
                event.setCancelled(true);
                Message.ERROR_DISPENSE_ARMOR_EXPLOIT.sendColoredMessage(player.getPlayer());
            }
        }
    }

    @EventHandler
    public void onInventoryOpen(InventoryOpenEvent event)
    {
        if(!(event.getPlayer() instanceof Player) || (event.getInventory() instanceof PlayerInventory))
        {
            return;
        }

        PrinterPlayer player = PrinterPlayer.fromPlayer((Player) event.getPlayer());
        if(player == null || !player.isPrinting())
        {
            return;
        }

        event.setCancelled(true);
        Message.ERROR_INVENTORY_OPEN_EXPLOIT.sendColoredMessage(player.getPlayer());
    }

    @EventHandler
    public void onPlayerInteractEntity(PlayerInteractEntityEvent event)
    {
        if(!(event.getRightClicked() instanceof ItemFrame))
        {
            return;
        }

        PrinterPlayer player = PrinterPlayer.fromPlayer(event.getPlayer());
        if(player == null || !player.isPrinting())
        {
            return;
        }

        event.setCancelled(true);
        Message.ERROR_ITEM_FRAME_EXPLOIT.sendColoredMessage(player.getPlayer());
    }

    @EventHandler
    public void onArmorStandEdit(PlayerArmorStandManipulateEvent event)
    {
        PrinterPlayer player = PrinterPlayer.fromPlayer(event.getPlayer());
        if(player == null || !player.isPrinting())
        {
            return;
        }

        event.setCancelled(true);
        Message.ERROR_ARMOR_STAND_EXPLOIT.sendColoredMessage(player.getPlayer());
    }

    @EventHandler
    public void onEntityDamageByEntity(EntityDamageByEntityEvent event)
    {
        if(!(event.getDamager() instanceof Player))
        {
            return;
        }

        PrinterPlayer player = PrinterPlayer.fromPlayer((Player) event.getDamager());
        if(player == null || !player.isPrinting())
        {
            return;
        }

        event.setCancelled(true);
        Message.ERROR_DAMAGE_EXPLOIT.sendColoredMessage(player.getPlayer());
    }

    @EventHandler
    public void onTeleportEvent(PlayerTeleportEvent event)
    {
        PrinterPlayer player = PrinterPlayer.fromPlayer(event.getPlayer());
        if(player == null || !player.isPrinting())
        {
            return;
        }

        player.printerOff();
        Message.ERROR_TELEPORT_EXPLOIT.sendColoredMessage(player.getPlayer());
    }

    @EventHandler
    public void onPlayerDamage(EntityDamageEvent event)
    {
        if(!(event.getEntity() instanceof Player) || !event.getCause().equals(EntityDamageEvent.DamageCause.FALL))
        {
            return;
        }

        PrinterPlayer player = PrinterPlayer.fromPlayer((Player) event.getEntity());
        if(player == null)
        {
            return;
        }

        if(System.currentTimeMillis() < (player.getPrinterOffTimestamp() + Printer.INSTANCE.getMainConfig().getNoFallDamageSeconds() * 1000))
        {
            event.setCancelled(true);
        }
    }
}
