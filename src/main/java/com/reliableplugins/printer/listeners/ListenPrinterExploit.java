package com.reliableplugins.printer.listeners;

import com.reliableplugins.printer.Printer;
import com.reliableplugins.printer.config.Message;
import com.reliableplugins.printer.type.PrinterPlayer;
import org.bukkit.entity.ItemFrame;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.player.*;
import org.bukkit.inventory.PlayerInventory;

public class ListenPrinterExploit implements Listener
{
    @EventHandler
    public void onBlockBreak(BlockBreakEvent event)
    {
        if(Printer.INSTANCE.printerPlayers.containsKey(event.getPlayer()))
        {
            PrinterPlayer player = Printer.INSTANCE.printerPlayers.get(event.getPlayer());
            if(player.isPrinting() && Printer.INSTANCE.getMainConfig().getUnbreakables().contains(event.getBlock().getType()))
            {
                event.setCancelled(true);
                player.getPlayer().sendMessage(Message.ERROR_BLOCK_BREAK_NOT_ALLOWED.getMessage());
            }
        }
    }

    @EventHandler
    public void onPlayerDropItem(PlayerDropItemEvent event)
    {
        if(Printer.INSTANCE.printerPlayers.containsKey(event.getPlayer()))
        {
            PrinterPlayer player = Printer.INSTANCE.printerPlayers.get(event.getPlayer());
            if(player.isPrinting())
            {
                event.setCancelled(true);
                player.getPlayer().sendMessage(Message.ERROR_DROP_ITEM_EXPLOIT.getMessage());
            }
        }
    }

    @EventHandler
    public void onItemPickup(PlayerPickupItemEvent event)
    {
        if(Printer.INSTANCE.printerPlayers.containsKey(event.getPlayer()))
        {
            PrinterPlayer player = Printer.INSTANCE.printerPlayers.get(event.getPlayer());
            if(player.isPrinting())
            {
                event.setCancelled(true);
                player.getPlayer().sendMessage(Message.ERROR_PICKUP_EXPLOIT.getMessage());
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onCommandPreExecute(PlayerCommandPreprocessEvent event)
    {
        if(Printer.INSTANCE.printerPlayers.containsKey(event.getPlayer()))
        {
            PrinterPlayer player = Printer.INSTANCE.printerPlayers.get(event.getPlayer());
            if(player.isPrinting() && !event.getMessage().startsWith("/printer"))
            {
                event.setCancelled(true);
                player.getPlayer().sendMessage(Message.ERROR_COMMAND_EXPLOIT.getMessage());
            }
        }
    }

//    @EventHandler
//    public void onDispenseArmor(BlockDispenseEvent event)
//    {
//        if(!Printer.INSTANCE.getNmsHandler().isArmor(event.getItem()))
//        {
//            return;
//        }
//        Location location = event.getBlock().getLocation();
//        Directional dispenser = (Directional) event.getBlock().getState().getData();
//        Location[] toCheck;
//
//                /*
//                        [  ]
//                    [  ][[]][  ]
//                        [  ]
//                 */
//        switch (dispenser.getFacing())
//        {
//            case UP:
//                toCheck = new Location[10];
//                toCheck[0] = location.add( 0, 1,  0);
//                toCheck[1] = location.add( 1, 1,  0);
//                toCheck[2] = location.add( 0, 1,  1);
//                toCheck[3] = location.add(-1, 1,  0);
//                toCheck[4] = location.add( 0, 1, -1);
//
//                toCheck[5] = location.add( 0, 2,  0);
//                toCheck[6] = location.add( 1, 2,  0);
//                toCheck[7] = location.add( 0, 2,  1);
//                toCheck[8] = location.add(-1, 2,  0);
//                toCheck[9] = location.add( 0, 2, -1);
//                break;
//            case DOWN:
//                toCheck = new Location[10];
//                toCheck[0] = location.add( 0, -1,  0);
//                toCheck[1] = location.add( 1, -1,  0);
//                toCheck[2] = location.add( 0, -1,  1);
//                toCheck[3] = location.add(-1, -1,  0);
//                toCheck[4] = location.add( 0, -1, -1);
//
//                toCheck[5] = location.add( 0, -2,  0);
//                toCheck[6] = location.add( 1, -2,  0);
//                toCheck[7] = location.add( 0, -2,  1);
//                toCheck[8] = location.add(-1, -2,  0);
//                toCheck[9] = location.add( 0, -2, -1);
//                break;
//            case EAST: // in +x direction
//                toCheck = new Location[6];
//
//                // Horizontal
//                toCheck[0] = location.add(1, 0,   0);
//                toCheck[1] = location.add(1, 0,   1);
//                toCheck[2] = location.add(1, 0,  -1);
//                toCheck[3] = location.add(2, 0,   0);
//
//                // Vertical
//                toCheck[4] = location.add(1,  1,  0);
//                toCheck[5] = location.add(1, -1,  0);
//                break;
//            case WEST: // in -x direction
//                toCheck = new Location[6];
//
//                // Horizontal
//                toCheck[0] = location.add(-1, 0,   0);
//                toCheck[1] = location.add(-1, 0,   1);
//                toCheck[2] = location.add(-1, 0,  -1);
//                toCheck[3] = location.add(-2, 0,   0);
//
//                // Vertical
//                toCheck[4] = location.add(-1,  1,  0);
//                toCheck[5] = location.add(-1, -1,  0);
//                break;
//            case NORTH: // in -z direction
//                toCheck = new Location[6];
//
//                // Horizontal
//                toCheck[0] = location.add(-1, 0,   0);
//                toCheck[1] = location.add(-1, 0,   1);
//                toCheck[2] = location.add(-1, 0,  -1);
//                toCheck[3] = location.add(-2, 0,   0);
//
//                // Vertical
//                toCheck[4] = location.add(-1,  1,  0);
//                toCheck[5] = location.add(-1, -1,  0);
//                break;
//            case SOUTH:
//                break;
//        }
//        Player player = (Player) event.getTargetEntity();
//        if(Printer.INSTANCE.printerPlayers.containsKey(player))
//        {
//            PrinterPlayer printerPlayer = Printer.INSTANCE.printerPlayers.get(player);
//            if(printerPlayer.isPrinting())
//            {
//                event.setCancelled(true);
//                player.sendMessage(Message.ERROR_DISPENSE_ARMOR_EXPLOIT.getMessage());
//            }
//        }
//    }

    @EventHandler
    public void onInventoryOpen(InventoryOpenEvent event)
    {
        if(event.getPlayer() instanceof Player && !(event.getInventory() instanceof PlayerInventory))
        {
            Player ePlayer = (Player) event.getPlayer();
            if(Printer.INSTANCE.printerPlayers.containsKey(ePlayer))
            {
                PrinterPlayer player = Printer.INSTANCE.printerPlayers.get(ePlayer);
                if(player.isPrinting())
                {
                    event.setCancelled(true);
                    ePlayer.sendMessage(Message.ERROR_INVENTORY_OPEN_EXPLOIT.getMessage());
                }
            }
        }
    }

    @EventHandler
    public void onPlayerInteractEntity(PlayerInteractEntityEvent event)
    {
        if(event.getRightClicked() instanceof ItemFrame)
        {
            if(Printer.INSTANCE.printerPlayers.containsKey(event.getPlayer()))
            {
                PrinterPlayer player = Printer.INSTANCE.printerPlayers.get(event.getPlayer());
                if(player.isPrinting())
                {
                    event.setCancelled(true);
                    player.getPlayer().sendMessage(Message.ERROR_ITEM_FRAME_EXPLOIT.getMessage());
                }
            }
        }
    }

    @EventHandler
    public void onArmorStandEdit(PlayerArmorStandManipulateEvent event)
    {
        if(Printer.INSTANCE.printerPlayers.containsKey(event.getPlayer()))
        {
            PrinterPlayer player = Printer.INSTANCE.printerPlayers.get(event.getPlayer());
            if(player.isPrinting())
            {
                event.setCancelled(true);
                player.getPlayer().sendMessage(Message.ERROR_ARMOR_STAND_EXPLOIT.getMessage());
            }
        }
    }

    @EventHandler
    public void OnEntityDamageByEntity(EntityDamageByEntityEvent event)
    {
        if(event.getDamager() instanceof Player)
        {
            Player ePlayer = (Player) event.getDamager();
            if(Printer.INSTANCE.printerPlayers.containsKey(ePlayer))
            {
                PrinterPlayer player = Printer.INSTANCE.printerPlayers.get(ePlayer);
                if(player.isPrinting())
                {
                    player.printerOff();
                    player.getPlayer().sendMessage(Message.ERROR_DAMAGE_EXPLOIT.getMessage());
                }
            }
        }
    }
}
