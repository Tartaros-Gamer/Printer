/*
 * Project: Printer
 * Copyright (C) 2020 Bilal Salha <bsalha1@gmail.com>
 * GNU GPLv3 <https://www.gnu.org/licenses/gpl-3.0.en.html>
 */

package com.reliableplugins.printer.listeners;

import com.reliableplugins.printer.Printer;
import com.reliableplugins.printer.config.Message;
import com.reliableplugins.printer.type.PrinterPlayer;
import com.reliableplugins.printer.utils.BukkitUtil;
import org.bukkit.Location;
import org.bukkit.entity.Entity;
import org.bukkit.entity.ItemFrame;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockDispenseEvent;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.player.*;
import org.bukkit.inventory.PlayerInventory;

import java.util.List;

public class ListenPrinterExploit implements Listener
{
    @EventHandler
    public void onBlockBreak(BlockBreakEvent event)
    {
        if(Printer.INSTANCE.printerPlayers.containsKey(event.getPlayer()))
        {
            PrinterPlayer player = Printer.INSTANCE.printerPlayers.get(event.getPlayer());
            if(player.isPrinting())
            {
                if(Printer.INSTANCE.getMainConfig().isUnbreakable(event.getBlock().getType()))
                {
                    event.setCancelled(true);
                    player.getPlayer().sendMessage(Message.ERROR_BLOCK_BREAK_NOT_ALLOWED.getMessage());
                }
                else if(Printer.INSTANCE.getMainConfig().onlyBreakPlaced())
                {
                    if(player.isPlacedBlock(event.getBlock()))
                    {
                        player.removePlacedBlock(event.getBlock());
                    }
                    else
                    {
                        event.setCancelled(true);
                        player.getPlayer().sendMessage(Message.ERROR_NOT_PLACED_IN_PRINTER.getMessage());
                    }
                }
            }
        }
    }

    @EventHandler
    public void onPlayerDropItem(PlayerDropItemEvent event)
    {
        if(Printer.INSTANCE.printerPlayers.containsKey(event.getPlayer()))
        {
            PrinterPlayer player = Printer.INSTANCE.printerPlayers.get(event.getPlayer());
            if(player.isPrinting())
            {
                event.setCancelled(true);
                player.getPlayer().sendMessage(Message.ERROR_DROP_ITEM_EXPLOIT.getMessage());
            }
        }
    }

    @EventHandler
    public void onItemPickup(PlayerPickupItemEvent event)
    {
        if(Printer.INSTANCE.printerPlayers.containsKey(event.getPlayer()))
        {
            PrinterPlayer player = Printer.INSTANCE.printerPlayers.get(event.getPlayer());
            if(player.isPrinting())
            {
                event.setCancelled(true);
                player.getPlayer().sendMessage(Message.ERROR_PICKUP_EXPLOIT.getMessage());
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onCommandPreExecute(PlayerCommandPreprocessEvent event)
    {
        if(Printer.INSTANCE.printerPlayers.containsKey(event.getPlayer()))
        {
            PrinterPlayer player = Printer.INSTANCE.printerPlayers.get(event.getPlayer());
            if(player.isPrinting() && !Printer.INSTANCE.getMainConfig().isAllowedCommand(event.getMessage()))
            {
                event.setCancelled(true);
                player.getPlayer().sendMessage(Message.ERROR_COMMAND_EXPLOIT.getMessage());
            }
        }
    }

    @EventHandler
    public void onDispenseArmor(BlockDispenseEvent event)
    {
        if(!Printer.INSTANCE.getNmsHandler().isArmor(event.getItem()))
        {
            return;
        }
        org.bukkit.material.Dispenser dispenser = (org.bukkit.material.Dispenser) event.getBlock().getState().getData();
        Location dispenserLocation = event.getBlock().getLocation();
        Location toCheck;
        switch (dispenser.getFacing())
        {
            case UP: // +y
                toCheck = dispenserLocation.clone().add(0, 1, 0);
                break;
            case DOWN: // -y
                toCheck = dispenserLocation.clone().add(0, -1, 0);
                break;
            case EAST: // +x
                toCheck = dispenserLocation.clone().add(1, 0, 0);
                break;
            case WEST: // -x
                toCheck = dispenserLocation.clone().add(-1, 0, 0);
                break;
            case SOUTH: // +z
                toCheck = dispenserLocation.clone().add(0, 0, 1);
                break;
            case NORTH: // -z
                toCheck = dispenserLocation.clone().add(0, 0, -1);
                break;
            default:
                throw new IllegalStateException("Unexpected value: " + dispenser.getFacing());
        }

        List<Entity> nearbyEntities = BukkitUtil.getEntities(toCheck, 2);
        for(Entity entity : nearbyEntities)
        {
            if(entity instanceof Player)
            {
                Player player = (Player) entity;
                if(Printer.INSTANCE.printerPlayers.containsKey(player))
                {
                    PrinterPlayer printerPlayer = Printer.INSTANCE.printerPlayers.get(player);
                    if(printerPlayer.isPrinting())
                    {
                        event.setCancelled(true);
                        player.sendMessage(Message.ERROR_DISPENSE_ARMOR_EXPLOIT.getMessage());
                    }
                }
            }
        }
    }

    @EventHandler
    public void onInventoryOpen(InventoryOpenEvent event)
    {
        if(event.getPlayer() instanceof Player && !(event.getInventory() instanceof PlayerInventory))
        {
            Player ePlayer = (Player) event.getPlayer();
            if(Printer.INSTANCE.printerPlayers.containsKey(ePlayer))
            {
                PrinterPlayer player = Printer.INSTANCE.printerPlayers.get(ePlayer);
                if(player.isPrinting())
                {
                    event.setCancelled(true);
                    ePlayer.sendMessage(Message.ERROR_INVENTORY_OPEN_EXPLOIT.getMessage());
                }
            }
        }
    }

    @EventHandler
    public void onPlayerInteractEntity(PlayerInteractEntityEvent event)
    {
        if(event.getRightClicked() instanceof ItemFrame)
        {
            if(Printer.INSTANCE.printerPlayers.containsKey(event.getPlayer()))
            {
                PrinterPlayer player = Printer.INSTANCE.printerPlayers.get(event.getPlayer());
                if(player.isPrinting())
                {
                    event.setCancelled(true);
                    player.getPlayer().sendMessage(Message.ERROR_ITEM_FRAME_EXPLOIT.getMessage());
                }
            }
        }
    }

    @EventHandler
    public void onArmorStandEdit(PlayerArmorStandManipulateEvent event)
    {
        if(Printer.INSTANCE.printerPlayers.containsKey(event.getPlayer()))
        {
            PrinterPlayer player = Printer.INSTANCE.printerPlayers.get(event.getPlayer());
            if(player.isPrinting())
            {
                event.setCancelled(true);
                player.getPlayer().sendMessage(Message.ERROR_ARMOR_STAND_EXPLOIT.getMessage());
            }
        }
    }

    @EventHandler
    public void onEntityDamageByEntity(EntityDamageByEntityEvent event)
    {
        if(event.getDamager() instanceof Player)
        {
            Player ePlayer = (Player) event.getDamager();
            if(Printer.INSTANCE.printerPlayers.containsKey(ePlayer))
            {
                PrinterPlayer player = Printer.INSTANCE.printerPlayers.get(ePlayer);
                if(player.isPrinting())
                {
                    player.printerOff();
                    player.getPlayer().sendMessage(Message.ERROR_DAMAGE_EXPLOIT.getMessage());
                }
            }
        }
    }

    @EventHandler
    public void onTeleportEvent(PlayerTeleportEvent event)
    {
        if(Printer.INSTANCE.printerPlayers.containsKey(event.getPlayer()))
        {
            PrinterPlayer player = Printer.INSTANCE.printerPlayers.get(event.getPlayer());
            if(player.isPrinting())
            {
                player.printerOff();
                player.getPlayer().sendMessage(Message.ERROR_TELEPORT_EXPLOIT.getMessage());
            }
        }
    }

    @EventHandler
    public void onPlayerDamage(EntityDamageEvent event)
    {
        if(!(event.getEntity() instanceof Player) || !event.getCause().equals(EntityDamageEvent.DamageCause.FALL))
        {
            return;
        }

        Player player = (Player) event.getEntity();
        if(Printer.INSTANCE.printerPlayers.containsKey(player))
        {
            PrinterPlayer printerPlayer = Printer.INSTANCE.printerPlayers.get(player);
            if(System.currentTimeMillis() < (printerPlayer.getPrinterOffTimestamp() + Printer.INSTANCE.getMainConfig().getNoFallDamageSeconds() * 1000))
            {
                event.setCancelled(true);
            }
        }
    }

}
